// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String

  private Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  follows   Follow[]   @relation(name: "follows")
  followers Follow[]   @relation(name: "followers")
  Reaction  Reaction[]

  chats UserOnChat[]
  ownedChats Chat[] @relation(name: "chat_owner")
  messages ChatMessage[]
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId], name: "unique_follower_follow")
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]
  commentedPostId String? @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  qtyLikes Int @default(0)
  qtyRetweets Int @default(0)
  qtyComments Int @default(0)
  

  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[]
  comments Post[] @relation(name: "post_comments")
  commentedPost Post?  @relation(fields: [commentedPostId], references: [id], name: "post_comments")
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  reactionType ReactionType
  postId       String       @db.Uuid
  userId       String       @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reactionType, postId, userId], name: "unique_post_reaction")
}

enum ReactionType {
  Like
  Retweet
}





model Chat {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name String
  ownerId String @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  owner User @relation(fields: [ownerId], references: [id], name: "chat_owner")
  participants UserOnChat[]
  messages ChatMessage[]
}

model UserOnChat {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  chatId String @db.Uuid

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])
  @@unique([userId, chatId], name: "unique_chat_user")
}

model ChatMessage {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId String @db.Uuid
  chatId String @db.Uuid
  message String

  createdAt DateTime  @default(now())

  sender User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])
}